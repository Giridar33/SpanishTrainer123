{"version":3,"sources":["reportWebVitals.js","components/InfinitivesSp.js","components/Tenses.js","components/PersonsSp.js","components/ModalContentSp.js","components/ModalSp.js","components/Tutorial.js","components/SetSeconds.js","components/MobileInfinitivesSp.js","components/MobileTenses.js","components/MobilePersonsSp.js","components/ReflexiveModalSp.js","components/SpecialCharactersSp.js","SpanishApp.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","Infinitives","infinitives","toggle_ar","toggle_er","toggle_ir","toggle_reflexive","toggle_all_irregulars","toggle_individual_irregulars","allIrregularsFalse","infinitiveToAnswer","showMobileInfinitives","toggleAllVerbOptions","irreg_infinitives","filter","irreg_infinitive","React","createElement","className","onClick","map","index","key","Tenses","Persons","persons","togglePerson","showMobilePersons","shortenPerson","personToAnswer","person","ModalContent","tense","teacherMode","modalContent","Fragment","ending","slice","thing","Modal","handleModal","isReflexive","example","Tutorial","props","handleTutorial","SetSeconds","secondsByUser","setSecondsByUser","decreaseSeconds","prevValue","increaseSeconds","MobileInfinitives","setShowMobileInfinitives","setShowMobilePersons","setShowMobileTenses","resetState","setLabelsOn","setInputOn","toggleMobileInfinitives","prevState","MobileTenses","MobilePersons","toggleMobilePersons","ReflexiveModal","SpecialCharactersSp","setInput","handleSpecialCharacter","char","prevInput","SpanishApp","inputRef","useRef","tenses","data","initialData","inf","enabled","name","6","jsonData","setJsonData","useState","labelsOn","inputOn","setTeacherMode","countdownInterval","setCountdownInterval","countdownDisplay","setCountdownDisplay","input","gameIsOn","setGameIsOn","gameOver","setGameOver","setInfinitiveToAnswer","tenseToAnswer","setTenseToAnswer","setPersonToAnswer","finalWord","setFinalWord","englishFinalWord","setEnglishFinalWord","setIsReflexive","rightAnswer","setRightAnswer","wrongAnswer","setWrongAnswer","userTries","setUserTries","showModal","setShowModal","showTutorial","setShowTutorial","allInfinitivesFalse","setAllInfinitivesFalse","setAllIrregularsFalse","allTensesFalse","setAllTensesFalse","allPersonsFalse","setAllPersonsFalse","showMobileTenses","playWrongSound","wrongSound","Audio","currentTime","play","catch","console","log","playSound","word","cleanWord","str","normalize","replace","toLowerCase","removeAccents","wordSound","useEffect","timer","setTimeout","clearTimeout","toggleTense","updatedTenses","updatedPersons","allPFalse","every","updatedInfinitives","infinitive","allInfFalse","handlePlay","clearInterval","length","activeInfinitives","varInfinitiveToAnswer","Math","floor","random","varTenseToAnswer","find","activePersons","p","randomPersonIndex","varPersonToAnswer","conjugations","varFinalWord","varEnglishFinalWord","current","focus","remainingTime","toString","newInterval","setInterval","handleCheck","newInput","newFinalWord","prevTries","showAnswer","handleKeyDown","event","preventDefault","document","addEventListener","removeEventListener","toggleTeacherMode","id","type","value","onChange","target","onKeyDown","disabled","ref","App","Spanish","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.4565b2da.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\n\r\nexport default function Infinitives({ \r\n    infinitives = [],\r\n    toggle_ar,\r\n    toggle_er,\r\n    toggle_ir,\r\n    toggle_reflexive,\r\n    toggle_all_irregulars,\r\n    toggle_individual_irregulars,\r\n    allIrregularsFalse,\r\n    infinitiveToAnswer,\r\n    showMobileInfinitives,\r\n    toggleAllVerbOptions\r\n}) {\r\n    // Add null check for infinitives\r\n    let irreg_infinitives = infinitives ? infinitives.filter(irreg_infinitive => \r\n        irreg_infinitive && irreg_infinitive[9] === \"irregular\") : [];\r\n\r\n    return (\r\n        <div className=\"infinitives\">\r\n            <h2 onClick={toggleAllVerbOptions}>\r\n                {infinitiveToAnswer ? infinitiveToAnswer[0] : \"Select Verb\"}\r\n            </h2>\r\n            {showMobileInfinitives && \r\n            <div className='info-1'>\r\n                <div className='regular-infinitives-container'>\r\n                    <p className={`info-column ${infinitives[0] && infinitives[0][10] ? 'active-option' : 'inactive-option'}`}\r\n                        onClick={() => toggle_ar()}>\r\n                        -ar verbs\r\n                    </p>\r\n                    <p className={`info-column ${infinitives[5] && infinitives[5][10] ? 'active-option' : 'inactive-option'}`}\r\n                        onClick={() => toggle_er()}>\r\n                        -er verbs\r\n                    </p>\r\n                    <p className={`info-column ${infinitives[10] && infinitives[10][10] ? 'active-option' : 'inactive-option'}`}\r\n                        onClick={() => toggle_ir()}>\r\n                        -ir verbs\r\n                    </p>\r\n                </div>\r\n\r\n                <p className={`info-column ${infinitives[15] && infinitives[15][10] ? 'active-option' : 'inactive-option'}`}\r\n                    onClick={() => toggle_reflexive()}>\r\n                    Reflexive verbs\r\n                </p>\r\n                <div className={`${allIrregularsFalse ? 'active-option' : 'inactive-option'}`}>\r\n                    <p className='info-column'\r\n                        onClick={() => toggle_all_irregulars()}>\r\n                        Irregular verbs\r\n                    </p>\r\n                    <div className='irregular-verbs-list'>\r\n                        {irreg_infinitives.map((irreg_infinitive, index) => (\r\n                            <p \r\n                                className={`info-column ${irreg_infinitive[10] ? 'active-option' : 'inactive-option'}`} \r\n                                key={index}\r\n                                onClick={() => toggle_individual_irregulars(index)}>\r\n                                {irreg_infinitive[0]}\r\n                            </p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nconst Tenses = ({ toggleAllVerbOptions }) => {\r\n    return (\r\n        <div className='tense-list'>\r\n            <h2 onClick={toggleAllVerbOptions}>Present Tense</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tenses;\r\n","import React from 'react';\r\n\r\nconst Persons = ({ persons, togglePerson, showMobilePersons, toggleAllVerbOptions, shortenPerson, personToAnswer }) => {\r\n\r\n    return (\r\n        <div className='person-list'>\r\n            <h2 onClick={toggleAllVerbOptions}>{personToAnswer ? shortenPerson(personToAnswer) : \"Select Person\"}</h2>\r\n            {showMobilePersons &&\r\n            <div className='info-3'>\r\n                {persons.map((person, index) => {\r\n                    return (\r\n                        <p \r\n                            className={`info-column ${person[1] ? 'active-option' : 'inactive-option'}`}\r\n                            key={index}\r\n                            onClick={() => togglePerson(index)}>\r\n                            {person[0]}\r\n                        </p>)\r\n                })}\r\n            </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Persons;","import React from 'react'\r\n\r\nconst ModalContent = ({ tense, teacherMode, infinitiveToAnswer }) => {\r\n\r\nlet modalContent = null;\r\n\r\n\r\n\r\n    switch (tense[0]) {\r\n        case \"Preterite\":\r\n        case \"Imperfect\":\r\n        case \"Present\":\r\n            modalContent = (\r\n                <div className='four-column-grid'>\r\n                    <>\r\n                        <p className='bold'>{teacherMode ? tense[0] : \"\"}</p>\r\n                        <p className='bold'>I</p>\r\n                        <p className='bold'>You</p>\r\n                        <p className='bold'>He/She</p>\r\n                        <p className='bold'>We</p>\r\n                        <p className='bold'>You all</p>\r\n                        <p className='bold'>They</p>\r\n                    </>\r\n\r\n                    <>\r\n                        {tense[2].map((ending, index) => (\r\n                            <React.Fragment key={index}>\r\n\r\n                                {index === 0 ? (\r\n                                    <>\r\n                                        <p>-AR</p>\r\n                                        <p>{ending}</p>\r\n                                    </>\r\n\r\n                                ) : index === 6 ? (\r\n                                    <>\r\n                                        <p>-ER</p>\r\n                                        <p>{ending}</p>\r\n                                    </>\r\n\r\n                                ) : index === 12 ? (\r\n                                    <>\r\n                                        <p>-IR</p>\r\n                                        <p>{ending}</p>\r\n                                    </>\r\n                                ) : (\r\n                                    <p>{ending}</p>\r\n                                )}\r\n                            </React.Fragment>\r\n                        ))}\r\n                    </>\r\n                </div>\r\n            );\r\n            break;\r\n        case \"Past Perfect\":\r\n            modalContent = (\r\n                <div className='two-column-grid'>\r\n                    <div className='column-table'>\r\n                        <>\r\n                            <p className='bold'>I</p>\r\n                            <p className='bold'>You</p>\r\n                            <p className='bold'>He/She</p>\r\n                            <p className='bold'>We</p>\r\n                            <p className='bold'>You all</p>\r\n                            <p className='bold'>They</p>\r\n                        </>\r\n                    </div>\r\n                    <div className='column-table'>\r\n                        {tense[1].map((ending, index) => {\r\n                            return <p key={index}>{ending}</p>\r\n                        })}\r\n                    </div>\r\n                    <div className='column-table center'>\r\n                        <p>➕</p>\r\n                    </div>\r\n                    <div className='column-table center'>\r\n                        <p>-ado</p>\r\n                        <p>-ido</p>\r\n                    </div>\r\n                </div>\r\n            );\r\n            break;\r\n        case \"Present Continuous\":\r\n            modalContent = (\r\n                <div className='two-column-grid'>\r\n                    <div className='column-table'>\r\n                        <>\r\n                            <p className='bold'>I</p>\r\n                            <p className='bold'>You</p>\r\n                            <p className='bold'>He/She</p>\r\n                            <p className='bold'>We</p>\r\n                            <p className='bold'>You all</p>\r\n                            <p className='bold'>They</p>\r\n                        </>\r\n                    </div>\r\n                    <div className='column-table'>\r\n                        {tense[1].map((ending, index) => {\r\n                            return <p key={index}>{ending}</p>\r\n                        })}\r\n                    </div>\r\n                    <div className='column-table center'>\r\n                        <p>➕</p>\r\n                    </div>\r\n                    <div className='column-table center'>\r\n                        <p>-ando</p>\r\n                        <p>-iendo</p>\r\n                    </div>\r\n                </div>\r\n            );\r\n            break;\r\n        case \"Immediate Future\":\r\n            modalContent = (\r\n                <div className='two-column-grid'>\r\n                    <div className='column-table'>\r\n                        {tense[1].map((ending, index) => {\r\n                            return <p key={index}>{ending.slice(0, -2)}</p>\r\n                        })}\r\n                    </div>\r\n                    <div className='column-table center'>\r\n                        <p>➕</p>\r\n                    </div>\r\n                    <div className='column-table center'>\r\n                        <p>a</p>\r\n                    </div>\r\n                    <div className='column-table center'>\r\n                        <p>➕</p>\r\n                    </div>\r\n                    <div className='column-table center'>\r\n                        <p>Infinitive</p>\r\n                    </div>\r\n                </div>\r\n            );\r\n            break;\r\n        case \"Simple Future\":\r\n            modalContent = (\r\n                <div className='two-column-grid'>\r\n                    <div className='column-table center'>\r\n                        <p>Infinitive</p>\r\n                    </div>\r\n                    <div className='column-table center'>\r\n                        <p>➕</p>\r\n                    </div>\r\n                    <div className='column-table'>\r\n                        <p>é</p>\r\n                        <p>ás</p>\r\n                        <p>á</p>\r\n                        <p>emos</p>\r\n                        <p>éis</p>\r\n                        <p>án</p>\r\n                    </div>\r\n                    <div className='column-table'>\r\n                        <>\r\n                            <p className='bold'>I</p>\r\n                            <p className='bold'>You</p>\r\n                            <p className='bold'>He/She</p>\r\n                            <p className='bold'>We</p>\r\n                            <p className='bold'>You all</p>\r\n                            <p className='bold'>They</p>\r\n                        </>\r\n                    </div>\r\n                </div>\r\n            );\r\n            break;\r\n        case \"Conditional\":\r\n            modalContent = (\r\n                <div className='two-column-grid'>\r\n                    <div className='column-table center'>\r\n                        <p>Infinitive</p>\r\n                    </div>\r\n                    <div className='column-table center'>\r\n                        <p>➕</p>\r\n                    </div>\r\n                    <div className='column-table'>\r\n                        <p>ía</p>\r\n                        <p>ías</p>\r\n                        <p>ía</p>\r\n                        <p>íamos</p>\r\n                        <p>íais</p>\r\n                        <p>ían</p>\r\n                    </div>\r\n                    <div className='column-table'>\r\n                        <>\r\n                            <p className='bold'>I</p>\r\n                            <p className='bold'>You</p>\r\n                            <p className='bold'>He/She</p>\r\n                            <p className='bold'>We</p>\r\n                            <p className='bold'>You all</p>\r\n                            <p className='bold'>They</p>\r\n                        </>\r\n                    </div>\r\n                </div>\r\n            );\r\n            break;\r\n        default:\r\n            modalContent = null;\r\n    }\r\n\r\n        switch (infinitiveToAnswer[9]) {\r\n        case \"irregular\":\r\n\r\n            modalContent = (\r\n                <div className={`${teacherMode ? \"nine-column-grid-teacherMode\": \"nine-column-grid\"}`}>\r\n                    <div className='irregulars-row'>\r\n                        <div className='column-table'>\r\n                            <p className='bold'>Preterite</p>\r\n                            {infinitiveToAnswer[1].map((thing, index) => {\r\n                                return <p key={index}>{thing[0]}</p>\r\n                            })}\r\n                        </div>\r\n                        <div className='column-table'>\r\n                            <p className='bold'>Imperfect</p>\r\n                            {infinitiveToAnswer[2].map((thing, index) => {\r\n                                return <p key={index}>{thing[0]}</p>\r\n                            })}\r\n                        </div>\r\n                        <div className='column-table'>\r\n                            <p className='bold'>Past Perfect</p>\r\n                            {infinitiveToAnswer[3].map((thing, index) => {\r\n                                return <p key={index}>{thing[0]}</p>\r\n                            })}\r\n                        </div>\r\n\r\n                        <div className='column-table'>\r\n                            <p className='bold'>Present Continuous</p>\r\n                            {infinitiveToAnswer[5].map((thing, index) => {\r\n                                return <p key={index}>{thing[0]}</p>\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className='irregulars-row'>\r\n                        <div className='column-table'>\r\n                            <p className='bold'>Present</p>\r\n                            {infinitiveToAnswer[4].map((thing, index) => {\r\n                                return <p key={index}>{thing[0]}</p>\r\n                            })}\r\n                        </div>\r\n\r\n                        <div className='column-table'>\r\n                            <p className='bold'>Immediate Future</p>\r\n                            {infinitiveToAnswer[6].map((thing, index) => {\r\n                                return <p key={index}>{thing[0]}</p>\r\n                            })}\r\n                        </div>\r\n                        <div className='column-table'>\r\n                            <p className='bold'>Simple Future</p>\r\n                            {infinitiveToAnswer[7].map((thing, index) => {\r\n                                return <p key={index}>{thing[0]}</p>\r\n                            })}\r\n                        </div>\r\n                        <div className='column-table'>\r\n                            <p className='bold'>Conditional</p>\r\n                            {infinitiveToAnswer[8].map((thing, index) => {\r\n                                return <p key={index}>{thing[0]}</p>\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n            break;\r\n    }\r\n\r\n  return modalContent\r\n}\r\n\r\nexport default ModalContent;","import React from 'react';\r\nimport './Modal.css'\r\nimport ModalContent from './ModalContentSp';\r\n\r\nconst Modal = ({ tense, handleModal, teacherMode, isReflexive, infinitiveToAnswer }) => {\r\n\r\n    return (\r\n        <div className='modal-backdrop' onClick={handleModal}>\r\n            <div className='modal'>\r\n                {infinitiveToAnswer[9] != \"irregular\" &&\r\n                    <h3>{tense[0]} Cheatsheet</h3>\r\n                }\r\n                {infinitiveToAnswer[9] === \"irregular\" &&\r\n                    <h3>Verb '{infinitiveToAnswer[0]}' Cheatsheet</h3>\r\n                }\r\n                {infinitiveToAnswer[9] != \"irregular\" &&\r\n                    <p>{tense[3]}</p>\r\n                }\r\n                {infinitiveToAnswer[9] === \"irregular\" &&\r\n                    <p>The verb '{infinitiveToAnswer[0]}' is irregular!</p>\r\n                }\r\n                \r\n                <ModalContent \r\n                    handleModal={handleModal}\r\n                    tense={tense}\r\n                    teacherMode={teacherMode}\r\n                    infinitiveToAnswer={infinitiveToAnswer}\r\n                    />\r\n\r\n                {infinitiveToAnswer[9] != \"irregular\" && \r\n                    <>\r\n                        <p className='modal-section'>Examples</p>\r\n                        {tense[4].map((example, index) => {\r\n                            return <p key={index}>{example}</p>\r\n                        })}\r\n                        <p className='modal-section'>Irregulars</p>\r\n                        <p>{tense[5]}</p>\r\n                        {isReflexive && \r\n                        <>\r\n                            <p className='bold'>Reflexive verbs</p>\r\n                            <p>Remember you need to add the reflexive particle before the verb!</p>\r\n                            <p>These endings are 'me', 'te', 'se', 'nos', 'os', 'se'</p>\r\n                        </>}\r\n                    </>\r\n                \r\n                }\r\n\r\n                \r\n                \r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal;","import React from 'react'\r\nimport './Modal.css'\r\n\r\nexport default function Tutorial(props) {\r\n  return (\r\n    <div className='modal-backdrop' onClick={props.handleTutorial}>\r\n      <div className='modal'>\r\n        <h3>Welcome to the Spanish Verbs Trainer!</h3>\r\n        <h4>Student Mode</h4>\r\n        <p>Click on the 'Play' button (or press '/' on your Keyboard) and you will be given a random infinitive, verb tense and person (I form, you form, etc).</p>\r\n        <p>Remember you can always click on the 'Help' button to see a cheatsheet of the current tense.</p>\r\n        <p>Once you have the solution you can click on the 'Check' button (or press Enter on your Keyboard).</p>\r\n        <p>You have 3 tries each time.</p>\r\n        <p>Don't forget you can deactivate any of the tenses or persons, you can practice whatever you need to practice!</p>\r\n        <h4>Teacher Mode</h4>\r\n        <p>You can toggle between Student and Teacher Mode with the top right button.</p>\r\n        <p>Select the desired tenses and persons and set the timer (20 seconds by default).</p>\r\n        <p>When you click on 'Play' (or press '/'), a random infinitive, tense and person are selected, and the cheatsheet will appear automatically.</p>\r\n        <p>Ask your students and click on the 'Show Answer' button (or click '.') to see whether they deserve an AP.</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function SetSeconds({ secondsByUser, setSecondsByUser }) {\r\n\r\n  const increaseSeconds = () => {\r\n    if (secondsByUser < 60) {\r\n      setSecondsByUser(prevValue => prevValue + 5)\r\n    }\r\n  }\r\n\r\n  const decreaseSeconds = () => {\r\n    if (secondsByUser > 5) {\r\n      setSecondsByUser(prevValue => prevValue - 5)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <button className='seconds-button'>\r\n        <button onClick={decreaseSeconds} className='small-button'>➖</button>\r\n        <label>{secondsByUser}</label>\r\n        <button onClick={increaseSeconds} className='small-button'>➕</button>\r\n    </button>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nexport default function MobileInfinitives({ showMobileInfinitives, \r\n                                            setShowMobileInfinitives, \r\n                                            setShowMobilePersons,\r\n                                            setShowMobileTenses,\r\n                                            toggle_ar, \r\n                                            toggle_er, \r\n                                            toggle_ir, \r\n                                            toggle_reflexive, \r\n                                            toggle_all_irregulars, \r\n                                            toggle_individual_irregulars, \r\n                                            allIrregularsFalse,\r\n                                            resetState,\r\n                                            setLabelsOn,\r\n                                            setInputOn,\r\n                                            infinitiveToAnswer }) {\r\n\r\n    const { infinitives } = infinitiveToAnswer || {};\r\n    // Add null check for infinitives\r\n    let irreg_infinitives = infinitives ? infinitives.filter(irreg_infinitive => \r\n        irreg_infinitive && irreg_infinitive[9] === \"irregular\") : [];\r\n\r\n    const toggleMobileInfinitives = () => {\r\n        resetState();\r\n        setLabelsOn(false);\r\n        setInputOn(false);\r\n        setShowMobilePersons(false);\r\n        setShowMobileTenses(false);\r\n        setShowMobileInfinitives(prevState => !prevState)\r\n    }\r\n\r\n  return (\r\n    <div className=\"mobile-infinitives\">\r\n      <h2 onClick={toggleMobileInfinitives}>{infinitiveToAnswer ? infinitiveToAnswer[0] : \"Select Verb\"}</h2>\r\n      {showMobileInfinitives && \r\n      <div className='info-1'>\r\n\r\n                <div className='mobile-regular-infinitives-container'>\r\n                    <p className={`info-column ${infinitives && infinitives[0] && infinitives[0][10] ? 'active-option' : 'inactive-option'}`}\r\n                        onClick={() => toggle_ar()}>\r\n                        -ar verbs\r\n                    </p>\r\n                    <p className={`info-column ${infinitives && infinitives[5] && infinitives[5][10] ? 'active-option' : 'inactive-option'}`}\r\n                        onClick={() => toggle_er()}>\r\n                        -er verbs\r\n                    </p>\r\n                    <p className={`info-column ${infinitives && infinitives[10] && infinitives[10][10] ? 'active-option' : 'inactive-option'}`}\r\n                        onClick={() => toggle_ir()}>\r\n                        -ir verbs\r\n                    </p>\r\n                </div>\r\n\r\n                <p className={`info-column ${infinitives && infinitives[15] && infinitives[15][10] ? 'active-option' : 'inactive-option'}`}\r\n                    onClick={() => toggle_reflexive()}>\r\n                    Reflexive verbs\r\n                </p>\r\n                <div className={`${allIrregularsFalse ? 'active-option' : 'inactive-option'}`}>\r\n                    <p className='info-column'\r\n                        onClick={() => toggle_all_irregulars()}>\r\n                        Irregular verbs\r\n                    </p>\r\n                    <div className='irregular-verbs-list-mobile'>\r\n                        {irreg_infinitives.map((irreg_infinitive, index) => (\r\n                            <p \r\n                                className={`info-column ${irreg_infinitive[10] ? 'active-option' : 'inactive-option'}`} \r\n                                key={index}\r\n                                onClick={() => toggle_individual_irregulars(index)}>\r\n                                {irreg_infinitive[0]}\r\n                            </p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>}\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function MobileTenses({ toggleAllVerbOptions }) {\r\n  return (\r\n    <div className='mobile-tenses'>\r\n      <h2 onClick={toggleAllVerbOptions}>Present Tense</h2>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function MobilePersons({ showMobilePersons, \r\n                                        setShowMobilePersons, \r\n                                        setShowMobileTenses,\r\n                                        setShowMobileInfinitives,\r\n                                        persons, \r\n                                        togglePerson,\r\n                                        resetState,\r\n                                        setLabelsOn,\r\n                                        setInputOn,\r\n                                        personToAnswer,\r\n                                        shortenPerson }) {\r\n\r\n    const toggleMobilePersons = () => {\r\n        resetState();\r\n        setLabelsOn(false);\r\n        setInputOn(false);\r\n        setShowMobileInfinitives(false);\r\n        setShowMobileTenses(false);\r\n        setShowMobilePersons(prevState => !prevState)\r\n    }\r\n\r\n  return (\r\n    <div className='mobile-persons'>\r\n      <h2 onClick={toggleMobilePersons}>{personToAnswer ? shortenPerson(personToAnswer) : \"Select Person\"}</h2>\r\n      {showMobilePersons && \r\n            <div className='info-3-mobile'>\r\n                {persons.map((person, index) => {\r\n                    return (\r\n                        <p \r\n                            className={`info-column-mobile ${(person[0][0])}${index} ${person[1] ? 'active-option' : 'inactive-option'}`}\r\n                            key={index}\r\n                            onClick={() => togglePerson(index)}>\r\n                            {shortenPerson(person)}\r\n                        </p>)\r\n                })}\r\n            </div>\r\n        }\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function ReflexiveModal() {\r\n  return (\r\n    <div className='column-table-reflexive'>\r\n        <p className='bold'>Reflexive</p>\r\n        <p>me</p>\r\n        <p>te</p>\r\n        <p>se</p>\r\n        <p>nos</p>\r\n        <p>os</p>\r\n        <p>se</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nconst SpecialCharactersSp = ({ setInput }) => {\r\n  // Function to handle the insertion of special characters\r\n  const handleSpecialCharacter = (char) => {\r\n    setInput((prevInput) => prevInput + char);\r\n  };\r\n\r\n  return (\r\n    <div className=\"special-characters\">\r\n      <p>Special Characters</p>\r\n      <div className='special-char-buttons'>\r\n        <button onClick={() => handleSpecialCharacter('á')}>á</button>\r\n        <button onClick={() => handleSpecialCharacter('é')}>é</button>\r\n        <button onClick={() => handleSpecialCharacter('í')}>í</button>\r\n        <button onClick={() => handleSpecialCharacter('ó')}>ó</button>\r\n        <button onClick={() => handleSpecialCharacter('ú')}>ú</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpecialCharactersSp;","import * as React from 'react';\r\nimport { useState, useRef, useEffect } from 'react';\r\nimport './App.css';\r\nimport './components/Mobile.css';\r\n\r\n// React components\r\nimport Infinitives from './components/InfinitivesSp';\r\nimport Tenses from './components/Tenses';\r\nimport Persons from './components/PersonsSp';\r\nimport Modal from './components/ModalSp';\r\nimport Tutorial from './components/Tutorial';\r\nimport SetSeconds from './components/SetSeconds';\r\nimport MobileInfinitives from './components/MobileInfinitivesSp';\r\nimport MobileTenses from './components/MobileTenses';\r\nimport MobilePersons from './components/MobilePersonsSp';\r\nimport ModalContent from './components/ModalContentSp';\r\nimport ReflexiveModal from './components/ReflexiveModalSp';\r\nimport SpecialCharactersSp from './components/SpecialCharactersSp';\r\n\r\n// Data file\r\nimport data from './spanish-data.json';\r\n\r\nfunction SpanishApp() {\r\n  const inputRef = useRef(null);\r\n  const { infinitives, tenses, persons } = data;\r\n\r\n  const initialData = {\r\n    ...data,\r\n    infinitives: data.infinitives.map((inf, index) =>\r\n      index === 0 ? [...inf.slice(0, 10), true] : inf\r\n    ),\r\n    tenses: data.tenses.map(tense => {\r\n      const enabled = tense.name === \"present tense\";\r\n      return {\r\n        ...tense,\r\n        [6]: enabled\r\n      };\r\n    }),\r\n    persons: data.persons.map((person, index) =>\r\n      index === 0 ? [person[0], true] : person\r\n    )\r\n  };\r\n\r\n  const [jsonData, setJsonData] = useState(initialData);\r\n  const [labelsOn, setLabelsOn] = useState(false);\r\n  const [inputOn, setInputOn] = useState(false);\r\n  const [teacherMode, setTeacherMode] = useState(false);\r\n  const [secondsByUser, setSecondsByUser] = useState(20);\r\n  const [countdownInterval, setCountdownInterval] = useState(null);\r\n  const [countdownDisplay, setCountdownDisplay] = useState('');\r\n  const [input, setInput] = useState('');\r\n  const [gameIsOn, setGameIsOn] = useState(false);\r\n  const [gameOver, setGameOver] = useState(true);\r\n  const [infinitiveToAnswer, setInfinitiveToAnswer] = useState('');\r\n  const [tenseToAnswer, setTenseToAnswer] = useState('');\r\n  const [personToAnswer, setPersonToAnswer] = useState();\r\n  const [finalWord, setFinalWord] = useState('');\r\n  const [englishFinalWord, setEnglishFinalWord] = useState('');\r\n  const [isReflexive, setIsReflexive] = useState(false);\r\n  const [rightAnswer, setRightAnswer] = useState(false);\r\n  const [wrongAnswer, setWrongAnswer] = useState(false);\r\n  const [userTries, setUserTries] = useState(3);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [showTutorial, setShowTutorial] = useState(false);\r\n  const [allInfinitivesFalse, setAllInfinitivesFalse] = useState(false);\r\n  const [allIrregularsFalse, setAllIrregularsFalse] = useState(false);\r\n  const [allTensesFalse, setAllTensesFalse] = useState(false);\r\n  const [allPersonsFalse, setAllPersonsFalse] = useState(false);\r\n  const [showMobileInfinitives, setShowMobileInfinitives] = useState(false);\r\n  const [showMobileTenses, setShowMobileTenses] = useState(false);\r\n  const [showMobilePersons, setShowMobilePersons] = useState(false);\r\n\r\n  // Function to remove accents\r\n  const removeAccents = (str) => {\r\n    return str\r\n      .normalize(\"NFD\")\r\n      .replace(/[\\u0300-\\u036f]/g, \"\")\r\n      .toLowerCase();\r\n  };\r\n\r\n  // Function to play wrong sound\r\n  const playWrongSound = () => {\r\n    const wrongSound = new Audio(process.env.PUBLIC_URL + '/sound/wrong.mp3');\r\n    wrongSound.currentTime = 0;\r\n    wrongSound.play().catch(e => console.log(\"Error playing wrong sound:\", e));\r\n  };\r\n\r\n  // Function to play sound for the given word\r\n  const playSound = (word) => {\r\n    try {\r\n      const cleanWord = removeAccents(word);\r\n      const wordSound = new Audio(`${process.env.PUBLIC_URL}/sound/${cleanWord}.mp3`);\r\n      wordSound.currentTime = 0;\r\n      wordSound.play().catch((e) => console.log('Audio play failed:', e));\r\n    } catch (e) {\r\n      console.log('Sound error:', e);\r\n    }\r\n  };\r\n\r\n  // Play sound only when finalWord is set and answer is correct\r\n  useEffect(() => {\r\n    if (finalWord && rightAnswer) {\r\n      playSound(finalWord);\r\n      const timer = setTimeout(() => {\r\n        setRightAnswer(false); // reset after playing\r\n      }, 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [finalWord, rightAnswer]);\r\n  \r\n\r\n\r\n\r\n\r\n  \r\n\r\n  //-------FUNCTIONS----FUNCTIONS-------FUNCTIONS--------FUNCTIONS-------FUNCTIONS-------FUNCTIONS-----FUNCTIONS------\r\n\r\n  const resetState = () => {\r\n    setInput(\"\");\r\n    setRightAnswer(false);\r\n    setWrongAnswer(false);\r\n    setUserTries(3);\r\n    setFinalWord(\"\");\r\n    setEnglishFinalWord(\"\");\r\n    setTenseToAnswer(\"\");\r\n    setInfinitiveToAnswer(\"\");\r\n    setPersonToAnswer(\"\");\r\n    setShowModal(false);\r\n    setIsReflexive(false);\r\n  }\r\n\r\n  // Enables the functionality to toggle the tenses on or off\r\n    const toggleTense = (index) => {\r\n    const updatedTenses = jsonData.tenses.map(tense => {\r\n      // Only enable present tense, disable all others\r\n      tense[6] = tense.name === \"present tense\";\r\n      return tense;\r\n    });\r\n    setJsonData({ ...jsonData, tenses: updatedTenses });\r\n    setAllTensesFalse(false); // Always false since present tense is always enabled\r\n    resetState();\r\n    setLabelsOn(false);\r\n    setInputOn(false);\r\n  }\r\n\r\n  const togglePerson = (index) => {\r\n    const updatedPersons = [...jsonData.persons];\r\n    updatedPersons[index][1] = !updatedPersons[index][1];\r\n    setJsonData({ ...jsonData, persons: updatedPersons })\r\n\r\n    const allPFalse = updatedPersons.every(person => !person[1]);\r\n    setAllPersonsFalse(allPFalse);\r\n    resetState(); // we reset the game\r\n    setLabelsOn(false);\r\n    setInputOn(false);\r\n  }\r\n\r\n  // -------------------------Function to show all verb options on or off---------------------------------*/\r\n\r\n  const toggleAllVerbOptions = () => {\r\n    setShowMobileInfinitives(prevValue => !prevValue);\r\n    setShowMobileTenses(prevValue => !prevValue);\r\n    setShowMobilePersons(prevValue => !prevValue);\r\n    resetState(); // we reset the game\r\n    setLabelsOn(false);\r\n    setInputOn(false);\r\n  }\r\n\r\n  // ----------------------------Functions to toggle the infinitives on and off------------------------------\r\n  const toggle_ar = () => {\r\n    const updatedInfinitives = jsonData.infinitives.map(infinitive => {\r\n      //check if the infinitive is an -ar verb\r\n      if (infinitive[9] === \"-ar verb\") {\r\n        //set the 10th value to its opposite (true or false)\r\n        infinitive[10] = !infinitive[10];\r\n      }\r\n      return infinitive\r\n    })\r\n    // update jsonData with modified values\r\n    setJsonData({ ... jsonData, infinitives: updatedInfinitives})\r\n    //We check whether all infinitives have been set to false by the user\r\n    const allInfFalse = updatedInfinitives.every(infinitive => !infinitive[10]);\r\n    setAllInfinitivesFalse(allInfFalse);\r\n    resetState(); // we reset the game\r\n    setLabelsOn(false);\r\n    setInputOn(false);\r\n  }\r\n\r\n  const toggle_er = () => {\r\n    const updatedInfinitives = jsonData.infinitives.map(infinitive => {\r\n      //check if the infinitive is an -er verb\r\n      if (infinitive[9] === \"-er verb\") {\r\n        //set the 10th value to its opposite (true or false)\r\n        infinitive[10] = !infinitive[10];\r\n      }\r\n      return infinitive\r\n    })\r\n    // update jsonData with modified values\r\n    setJsonData({ ... jsonData, infinitives: updatedInfinitives})\r\n    //We check whether all infinitives have been set to false by the user\r\n    const allInfFalse = updatedInfinitives.every(infinitive => !infinitive[10]);\r\n    setAllInfinitivesFalse(allInfFalse);\r\n    resetState(); // we reset the game\r\n    setLabelsOn(false);\r\n    setInputOn(false);\r\n  }\r\n\r\n  const toggle_ir = () => {\r\n    const updatedInfinitives = jsonData.infinitives.map(infinitive => {\r\n      //check if the infinitive is an -ir verb\r\n      if (infinitive[9] === \"-ir verb\") {\r\n        //set the 10th value to its opposite (true or false)\r\n        infinitive[10] = !infinitive[10];\r\n      }\r\n      return infinitive\r\n    })\r\n    // update jsonData with modified values\r\n    setJsonData({ ... jsonData, infinitives: updatedInfinitives})\r\n    //We check whether all infinitives have been set to false by the user\r\n    const allInfFalse = updatedInfinitives.every(infinitive => !infinitive[10]);\r\n    setAllInfinitivesFalse(allInfFalse);\r\n    resetState(); // we reset the game\r\n    setLabelsOn(false);\r\n    setInputOn(false);\r\n  }\r\n\r\n  const toggle_reflexive = () => {\r\n    const updatedInfinitives = jsonData.infinitives.map(infinitive => {\r\n      if (infinitive[9] === \"reflexive\") {\r\n        infinitive[10] = !infinitive[10];\r\n      }\r\n      return infinitive\r\n    })\r\n    setJsonData({ ... jsonData, infinitives: updatedInfinitives})\r\n    const allInfFalse = updatedInfinitives.every(infinitive => !infinitive[10]);\r\n    setAllInfinitivesFalse(allInfFalse);\r\n    resetState(); //\r\n    setLabelsOn(false);\r\n    setInputOn(false);\r\n  }\r\n\r\n  const toggle_all_irregulars = () => {\r\n    const updatedInfinitives = jsonData.infinitives.map(infinitive => {\r\n      if (infinitive[9] === \"irregular\"){\r\n        if (infinitives[27][10] === false) {\r\n          infinitive[10] = true;\r\n          setAllIrregularsFalse(true);\r\n        } else if (infinitives[27][10] === true){\r\n          infinitive[10] = false;\r\n          setAllIrregularsFalse(false);\r\n        }  \r\n      }\r\n      return infinitive\r\n    })\r\n    \r\n    setJsonData({ ... jsonData, infinitives: updatedInfinitives})\r\n    const allInfFalse = updatedInfinitives.every(infinitive => !infinitive[10]);\r\n    setAllInfinitivesFalse(allInfFalse);\r\n    resetState();\r\n    setLabelsOn(false);\r\n    setInputOn(false);\r\n  }\r\n\r\n  const toggle_individual_irregulars = (index) => {\r\n    const updatedInfinitives = [...jsonData.infinitives];\r\n    updatedInfinitives[index+20][10] = !updatedInfinitives[index+20][10];\r\n    setJsonData({ ... jsonData, infinitives: updatedInfinitives})\r\n    //here we check whether we have set all verbs to false\r\n    const allInfFalse = updatedInfinitives.every(infinitive => !infinitive[10]);\r\n    setAllInfinitivesFalse(allInfFalse);\r\n    //here we check whether we have set all irregulars to false\r\n    const allIrregularsFalse = (updatedInfinitives || [])\r\n    .filter(infinitive => infinitive[9] === \"irregular\")\r\n    .every(infinitive => !infinitive[10]);\r\n  \r\n  setAllIrregularsFalse(!allIrregularsFalse);\r\n  \r\n\r\n    resetState();\r\n    setLabelsOn(false);\r\n    setInputOn(false);\r\n  }\r\n\r\n\r\n\r\n  // Switches the value of showModal true/false\r\n  const handleModal = () => {\r\n    if (gameIsOn && finalWord !== \"\") {\r\n      setShowModal(prevValue => !prevValue)\r\n    }\r\n  }\r\n\r\n    // Switches the value of showTutorial true/false\r\n  const handleTutorial = () => {\r\n      setShowTutorial(prevValue => !prevValue)\r\n  }\r\n\r\n  //Function that selects the random verb that the user needs to guess\r\n  const handlePlay = () => {\r\n\r\n    setLabelsOn(true); // we make sure the info labels and input bar appear\r\n    setInputOn(true);\r\n\r\n    //we clear the interval of the countdown so there are no more than one running at the same time, creating bugs\r\n    clearInterval(countdownInterval); \r\n\r\n    //delete previous user input, delete all previous state values\r\n    resetState();\r\n\r\n    //Set Game to mode ON\r\n    setGameIsOn(true);\r\n    setGameOver(false);\r\n\r\n    //We make sure all verb options are closed on mobile\r\n    setShowMobileInfinitives(false)\r\n    setShowMobilePersons(false);\r\n    setShowMobileTenses(false);\r\n\r\n    //We make sure there is at least one tense and person active\r\n    if (allInfinitivesFalse || allTensesFalse || allPersonsFalse) {\r\n      setInput('Select at least one infinitive, tense and person!');\r\n      setLabelsOn(false);\r\n      return;\r\n    }\r\n\r\n    //choose infinitive\r\n    if (!infinitives || infinitives.length === 0) {\r\n      setInput('No infinitives available!');\r\n      setLabelsOn(false);\r\n      return;\r\n    }\r\n    \r\n    // Get only active infinitives (where the last element is true)\r\n    const activeInfinitives = infinitives.filter(inf => inf[inf.length-1] === true);\r\n    \r\n    if (activeInfinitives.length === 0) {\r\n      setInput('No active infinitives available!');\r\n      setLabelsOn(false);\r\n      return;\r\n    }\r\n    \r\n    const randomInfinitiveIndex = Math.floor(Math.random() * activeInfinitives.length);\r\n    const varInfinitiveToAnswer = activeInfinitives[randomInfinitiveIndex];\r\n\r\n    if (!varInfinitiveToAnswer) {\r\n      setInput('No active infinitives available!');\r\n      setLabelsOn(false);\r\n      return;\r\n    }\r\n\r\n    if (varInfinitiveToAnswer[9] === \"reflexive\") {\r\n      setIsReflexive(true);\r\n    }\r\n\r\n    // Default to present tense\r\n    if (!tenses || tenses.length === 0) {\r\n      setInput('No tenses available!');\r\n      setLabelsOn(false);\r\n      return;\r\n    }\r\n    console.log(tenses)\r\n    let varTenseToAnswer = tenses.find(tense => tense[0] === \"present tense\");\r\n\r\n    if (!varTenseToAnswer) {\r\n      setInput('Simple present tense not found!');\r\n      setLabelsOn(false);\r\n      return;\r\n    }\r\n\r\n    //choose person\r\n    if (!persons || persons.length === 0) {\r\n      setInput('No persons available!');\r\n      setLabelsOn(false);\r\n      return;\r\n    }\r\n\r\n    // Get only active persons (where the second element is true)\r\n    const activePersons = persons.filter(p => p[1] === true);\r\n    \r\n    if (activePersons.length === 0) {\r\n      setInput('No active persons available!');\r\n      setLabelsOn(false);\r\n      return;\r\n    }\r\n\r\n    const randomPersonIndex = Math.floor(Math.random() * activePersons.length);\r\n    const varPersonToAnswer = activePersons[randomPersonIndex];\r\n\r\n    // Verify conjugation data exists\r\n    if (!varInfinitiveToAnswer[6] || !varInfinitiveToAnswer[6][randomPersonIndex]) {\r\n      setInput('Missing conjugation data!');\r\n      setLabelsOn(false);\r\n      return;\r\n    }\r\n\r\n    // Get the conjugation data (index 6 in infinitive array)\r\n    const conjugations = varInfinitiveToAnswer[6];\r\n    if (!conjugations || !conjugations[randomPersonIndex]) {\r\n      setInput('Missing conjugation data!');\r\n      setLabelsOn(false);\r\n      return;\r\n    }\r\n    \r\n    let varFinalWord = conjugations[randomPersonIndex][0];\r\n    let varEnglishFinalWord = conjugations[randomPersonIndex][1];\r\n\r\n    //turn variables into state\r\n    setInfinitiveToAnswer(varInfinitiveToAnswer);\r\n    setTenseToAnswer(varTenseToAnswer);\r\n    setPersonToAnswer(varPersonToAnswer);\r\n    setFinalWord(varFinalWord);\r\n    setEnglishFinalWord(varEnglishFinalWord);\r\n    // Play sound for the displayed verb\r\n    playSound(varFinalWord);\r\n\r\n    // Focus the input element after setting the game\r\n    setTimeout(() => {\r\n      inputRef.current.focus();\r\n    }, 0);\r\n\r\n    // Set up countdown if in teacher mode\r\n    if (teacherMode) {\r\n      let remainingTime = secondsByUser;\r\n      setCountdownDisplay(remainingTime.toString());\r\n      \r\n      // Clear any existing interval\r\n      if (countdownInterval) {\r\n        clearInterval(countdownInterval);\r\n      }\r\n      \r\n      const newInterval = setInterval(() => {\r\n        remainingTime--;\r\n        setCountdownDisplay(remainingTime.toString());\r\n        \r\n        if (remainingTime <= 0) {\r\n          clearInterval(newInterval);\r\n          setGameIsOn(false);\r\n        }\r\n      }, 1000);\r\n      \r\n      setCountdownInterval(newInterval);\r\n    }\r\n  }\r\n\r\n  //Function that checks whether the user was right in his guess\r\n  const handleCheck = () => {\r\n    if (gameIsOn) {\r\n      if (input !== \"Select at least one tense and person!\") {\r\n        if (userTries > 0) {\r\n          if (input !== \"\") {\r\n            //tidy user input (set to lower case, delete accents, diacritics, etc)\r\n            let newInput = input.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n            let newFinalWord = finalWord.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")\r\n            \r\n            //case where the user enters the right answer\r\n            if (newInput === newFinalWord) {\r\n              playSound(newInput);\r\n              setRightAnswer(true);\r\n              setInput(finalWord);\r\n              setGameIsOn(false);\r\n              setGameOver(true);\r\n              setWrongAnswer(false);\r\n              //case where the user enters the pronoun before the verb, which is unnecesary but not incorrect\r\n            } else if ('yo ' + newFinalWord === newInput || \r\n                        'tu ' + newFinalWord === newInput || \r\n                        'el ' + newFinalWord === newInput || \r\n                        'ella ' + newFinalWord === newInput || \r\n                        'nosotros ' + newFinalWord === newInput || \r\n                        'vosotros ' + newFinalWord === newInput|| \r\n                        'ellos ' + newFinalWord === newInput || \r\n                        'ellas ' + newFinalWord === newInput\r\n            ) {playSound();\r\n              setRightAnswer(true);\r\n              setInput(finalWord + \" (no need to write the pronoun!)\");\r\n              setGameIsOn(false);\r\n              setGameOver(true);\r\n              setWrongAnswer(false);\r\n              //case where the user doesnt enter the reflexive pronoun when it is needed\r\n            //case where the user runs out of tries\r\n            }else if (newInput !== newFinalWord && userTries === 1) {\r\n              playWrongSound();\r\n              setUserTries(0)\r\n              setWrongAnswer(true);\r\n              setInput(`The answer was \"${finalWord}\"`)\r\n              setGameOver(true);\r\n              //case where the user gets the wrong answer\r\n            } else {\r\n              playWrongSound();\r\n              setWrongAnswer(true);\r\n              setInput(input);\r\n              setUserTries(prevTries => prevTries - 1)\r\n            }\r\n          } else { setInput(\"Type your answer!\") }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // This function appears only on Teacher mode, letting the teacher show the correct answer\r\n  const showAnswer = () => {\r\n    if (finalWord) {\r\n      setRightAnswer(true);\r\n      setInput(finalWord);///\r\n      setGameIsOn(false);\r\n    }\r\n  }\r\n  \r\n\r\n  // useEffect to add event listeners to buttons\r\n  useEffect(() => {\r\n      const handleKeyDown = (event) => {\r\n        if (event.key === '/') {\r\n          event.preventDefault() //this prevents the character '/' from appearing in the input\r\n          handlePlay();\r\n        } else if (event.key === '.') {\r\n          if (teacherMode) {\r\n            event.preventDefault() //this prevents the character '/' from appearing in the input\r\n            showAnswer();\r\n          }\r\n        } \r\n      };\r\n        //Add event listeners to the document for keydown events\r\n        document.addEventListener('keydown', handleKeyDown);\r\n\r\n        //Cleanup function to remove event listener when component unmounts\r\n        return() => {\r\n          document.removeEventListener('keydown', handleKeyDown)\r\n        };\r\n  }, [handlePlay, showAnswer, teacherMode]);\r\n\r\n  // This useEffect is here so that the countdown can be interrupted when clicking on showAnswer\r\n  useEffect(() => {\r\n    if (!gameIsOn) {\r\n      clearInterval(countdownInterval);\r\n    }\r\n  }, [countdownInterval, gameIsOn])\r\n\r\n  const toggleTeacherMode = () => {\r\n    setLabelsOn(false);\r\n    setInputOn(false);\r\n    setGameIsOn(false);\r\n    setGameOver(true);\r\n    setTeacherMode(prevValue => !prevValue);\r\n    resetState();\r\n  }\r\n\r\n    const shortenPerson = (personToAnswer) => {\r\n      if (personToAnswer[0] === \"yo → I\"){\r\n        return \"I\";\r\n      } else if (personToAnswer[0] === \"tú → you\"){\r\n        return \"you\";\r\n      } else if (personToAnswer[0] === \"él/ella → he/she\"){\r\n        return \"he / she\";\r\n      } else if (personToAnswer[0] === \"nosotros → we\"){\r\n        return \"we\";\r\n      } else if (personToAnswer[0] === \"vosotros → you all\"){\r\n        return \"you all\";\r\n      } else if (personToAnswer[0] === \"ellos → they\"){\r\n        return \"they\";\r\n      } else {\r\n        return \"\";\r\n      }\r\n    }\r\n\r\n\r\n  return (\r\n    // al final borre el estilo de la clase teacher, tal vez puedas borrarlo de la siguiente linea\r\n    <div className={`App ${teacherMode ? \"teacher\" : \"\"}`}>\r\n      <div className=\"framework\">\r\n\r\n        <div className='title-row'>\r\n          <button className='top-button' onClick={handleTutorial}><span className=\"material-symbols-outlined\">help</span></button>\r\n          <h1 className=\"title\">Spanish verbs trainer: {teacherMode ? \"Teacher Mode\" : \"Student Mode\"}</h1>\r\n          <button \r\n            className='top-button'\r\n            onClick={toggleTeacherMode}>\r\n            <span className=\"material-symbols-outlined\">person_raised_hand</span>\r\n          </button>\r\n        </div>\r\n        \r\n        {!teacherMode && <p className='tries'>{`Remaining tries: ${userTries}`}</p>}\r\n\r\n        <div className=\"row1\">\r\n          <Tenses \r\n            tenses={tenses} \r\n            toggleTense={toggleTense}\r\n            showMobileTenses={showMobileTenses}\r\n            toggleAllVerbOptions={toggleAllVerbOptions}\r\n            tenseToAnswer={tenseToAnswer}\r\n            />\r\n          <Infinitives \r\n            infinitives={infinitives} \r\n            toggle_ar={toggle_ar} \r\n            toggle_er={toggle_er} \r\n            toggle_ir={toggle_ir}\r\n            toggle_reflexive={toggle_reflexive}\r\n            toggle_all_irregulars={toggle_all_irregulars} \r\n            toggle_individual_irregulars={toggle_individual_irregulars} \r\n            allIrregularsFalse={allIrregularsFalse}\r\n            infinitiveToAnswer={infinitiveToAnswer}\r\n            showMobileInfinitives={showMobileInfinitives}\r\n            toggleAllVerbOptions={toggleAllVerbOptions}\r\n            />\r\n          <Persons \r\n            persons={persons} \r\n            togglePerson={togglePerson}\r\n            showMobilePersons={showMobilePersons}\r\n            toggleAllVerbOptions={toggleAllVerbOptions}\r\n            shortenPerson={shortenPerson}\r\n            personToAnswer={personToAnswer}\r\n            />\r\n        </div>\r\n\r\n        <div className=\"mobile-row\">\r\n          <MobileTenses \r\n            showMobileTenses={showMobileTenses}\r\n            setShowMobileTenses={setShowMobileTenses}\r\n            setShowMobileInfinitives={setShowMobileInfinitives}\r\n            setShowMobilePersons={setShowMobilePersons}\r\n            tenses={tenses} \r\n            toggleTense={toggleTense}\r\n            resetState={resetState}\r\n            setLabelsOn={setLabelsOn}\r\n            setInputOn={setInputOn}\r\n            tenseToAnswer={tenseToAnswer}\r\n            />\r\n          <MobileInfinitives \r\n            showMobileInfinitives={showMobileInfinitives} \r\n            setShowMobileInfinitives={setShowMobileInfinitives}\r\n            setShowMobileTenses={setShowMobileTenses}\r\n            setShowMobilePersons={setShowMobilePersons}\r\n            infinitives={infinitives} \r\n            toggle_ar={toggle_ar} \r\n            toggle_er={toggle_er} \r\n            toggle_ir={toggle_ir}\r\n            toggle_reflexive={toggle_reflexive}\r\n            toggle_all_irregulars={toggle_all_irregulars} \r\n            toggle_individual_irregulars={toggle_individual_irregulars} \r\n            allIrregularsFalse={allIrregularsFalse}\r\n            resetState={resetState}\r\n            setLabelsOn={setLabelsOn}\r\n            setInputOn={setInputOn}\r\n            infinitiveToAnswer={infinitiveToAnswer}\r\n            />\r\n          <MobilePersons \r\n            showMobilePersons={showMobilePersons}\r\n            setShowMobilePersons={setShowMobilePersons}\r\n            setShowMobileInfinitives={setShowMobileInfinitives}\r\n            setShowMobileTenses={setShowMobileTenses}\r\n            persons={persons} \r\n            togglePerson={togglePerson}\r\n            resetState={resetState}\r\n            setLabelsOn={setLabelsOn}\r\n            setInputOn={setInputOn}\r\n            shortenPerson={shortenPerson}\r\n            personToAnswer={personToAnswer}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"row2\">\r\n          {teacherMode && inputOn && \r\n            <div className=\"countdown-display\">\r\n              Time remaining: {countdownDisplay}\r\n            </div>\r\n          }\r\n\r\n          {inputOn && \r\n            <input\r\n              className=\"user-text\"\r\n              id={(rightAnswer ? \"correct-answer\" : \"\") + (wrongAnswer ? \"incorrect-answer\" : \"\")}\r\n              type=\"text\"\r\n              value={input}\r\n              onChange={(e) => setInput(e.target.value)}\r\n              onKeyDown={(e) => {\r\n                if (e.key === 'Enter') {\r\n                  e.preventDefault(); //this line avoids the enter button to trigger input form submission\r\n                  handleCheck();\r\n                }\r\n              }}\r\n              disabled={gameOver}\r\n              ref={inputRef}\r\n            />}\r\n\r\n        </div>\r\n\r\n          {inputOn && finalWord &&\r\n            <div className='translation-label'>{`The meaning is: ${englishFinalWord}`}</div>\r\n          }\r\n\r\n      </div>\r\n\r\n      <div className='button-group'>\r\n        {!teacherMode && labelsOn && <button className='main-button squiggle' onClick={handleCheck}>Check</button>}\r\n        {teacherMode && labelsOn && <button className='main-button squiggle' onClick={showAnswer}>Show Answer</button>}\r\n        {teacherMode && !labelsOn && <div className='main-button dummy-button squiggle'>Dummy</div>}\r\n\r\n        <button className='main-button' onClick={handlePlay}>Play</button>\r\n\r\n        {teacherMode && <SetSeconds secondsByUser={secondsByUser} setSecondsByUser={setSecondsByUser}/>}\r\n        {!teacherMode && labelsOn && <button className='main-button squiggle' onClick={handleModal}>Cheatsheet</button>}\r\n      </div>\r\n      \r\n      {inputOn && !teacherMode &&\r\n        <SpecialCharactersSp setInput={setInput}/>\r\n      }\r\n      \r\n\r\n      {showModal &&\r\n        <Modal\r\n          handleModal={handleModal}\r\n          tense={tenseToAnswer}\r\n          isReflexive={isReflexive}\r\n          infinitiveToAnswer={infinitiveToAnswer}\r\n        />}\r\n      {showTutorial &&\r\n        <Tutorial handleTutorial={handleTutorial}/>\r\n      }\r\n      {teacherMode && tenseToAnswer &&\r\n        <div className='modal-2'>\r\n          {isReflexive && <ReflexiveModal />}\r\n          <ModalContent\r\n          handleModal={handleModal}\r\n          tense={tenseToAnswer}\r\n          teacherMode={teacherMode}\r\n          infinitiveToAnswer={infinitiveToAnswer}\r\n          />\r\n        </div>}\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SpanishApp;\r\n","import React from 'react';\r\nimport Spanish from './SpanishApp';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Spanish />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\n//import Spanish from './Spanish';\r\n//import French from './French';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}